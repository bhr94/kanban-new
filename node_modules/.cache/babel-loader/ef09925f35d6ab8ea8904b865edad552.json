{"ast":null,"code":"import _regeneratorRuntime from \"/Users/baharmutadayin/Documents/kanban-new/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/baharmutadayin/Documents/kanban-new/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar loadCurrentBoardListAction = function loadCurrentBoardListAction(boardId, idToken) {\n  return function (dispatch) {\n    dispatch({\n      type: \"LOAD_CURRENT_BOARD_LIST_PENDING\"\n    });\n    fetch('http://localhost:3001/loadCurrentBoardList', {\n      method: 'post',\n      headers: {\n        'Content-type': 'application/json',\n        \"Authorization\": idToken\n      },\n      body: JSON.stringify({\n        boardId: boardId\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(lists) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                console.log(\"hello \" + lists);\n                _context2.next = 3;\n                return Promise.all(lists.map( /*#__PURE__*/function () {\n                  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(list) {\n                    var response, newcards;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.next = 2;\n                            return fetch('http://localhost:3001/loadCards', {\n                              method: 'post',\n                              headers: {\n                                'Content-Type': 'application/json',\n                                \"Authorization\": idToken\n                              },\n                              body: JSON.stringify({\n                                listId: list.listid\n                              })\n                            });\n\n                          case 2:\n                            response = _context.sent;\n                            _context.next = 5;\n                            return response.json();\n\n                          case 5:\n                            newcards = _context.sent;\n                            list.cards = newcards;\n\n                          case 7:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function (_x2) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }()));\n\n              case 3:\n                console.log(\"lists \" + JSON.stringify(lists));\n                return _context2.abrupt(\"return\", lists);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()).then(function (data) {\n      return dispatch({\n        type: \"LOAD_CURRENT_BOARD_LIST_SUCCESS\",\n        payload: data\n      });\n    }).catch(function (error) {\n      return dispatch({\n        type: 'LOAD_CURRENT_BOARD_LIST_FAILED',\n        payload: error\n      });\n    });\n  };\n};\n\nexport default loadCurrentBoardListAction;","map":{"version":3,"sources":["/Users/baharmutadayin/Documents/kanban-new/src/redux/actions/loadCurrentBoardListAction.js"],"names":["loadCurrentBoardListAction","boardId","idToken","dispatch","type","fetch","method","headers","body","JSON","stringify","then","response","json","lists","console","log","Promise","all","map","list","listId","listid","newcards","cards","data","payload","catch","error"],"mappings":";;;AAAA,IAAMA,0BAA0B,GAAE,SAA5BA,0BAA4B,CAACC,OAAD,EAAUC,OAAV;AAAA,SAAqB,UAACC,QAAD,EAAa;AAEhEA,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAR;AACAC,IAAAA,KAAK,CAAC,4CAAD,EACH;AACEC,MAAAA,MAAM,EAAE,MADV;AAEEC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEP,yBAAiBL;AAFV,OAFX;AAMEM,MAAAA,IAAI,EAACC,IAAI,CAACC,SAAL,CAAe;AAChBT,QAAAA,OAAO,EAAEA;AADO,OAAf;AANP,KADG,CAAL,CAWGU,IAXH,CAWQ,UAAAC,QAAQ,EAAG;AACf,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,KAbH,EAcGF,IAdH;AAAA,0EAcQ,kBAAMG,KAAN;AAAA;AAAA;AAAA;AAAA;AACJC,gBAAAA,OAAO,CAACC,GAAR,CAAY,WAAWF,KAAvB;AADI;AAAA,uBAEEG,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACK,GAAN;AAAA,uFAAU,iBAAMC,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCACHf,KAAK,CAAC,iCAAD,EACtB;AACIC,8BAAAA,MAAM,EAAE,MADZ;AAEIC,8BAAAA,OAAO,EAAE;AACL,gDAAgB,kBADX;AAEL,iDAAiBL;AAFZ,+BAFb;AAMIM,8BAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBW,gCAAAA,MAAM,EAAED,IAAI,CAACE;AADI,+BAAf;AANV,6BADsB,CADF;;AAAA;AACpBV,4BAAAA,QADoB;AAAA;AAAA,mCAYHA,QAAQ,CAACC,IAAT,EAZG;;AAAA;AAYpBU,4BAAAA,QAZoB;AAaxBH,4BAAAA,IAAI,CAACI,KAAL,GAAcD,QAAd;;AAbwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAV;;AAAA;AAAA;AAAA;AAAA,oBAAZ,CAFF;;AAAA;AAkBJR,gBAAAA,OAAO,CAACC,GAAR,CAAY,WAAWP,IAAI,CAACC,SAAL,CAAeI,KAAf,CAAvB;AAlBI,kDAmBGA,KAnBH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAdR;;AAAA;AAAA;AAAA;AAAA,SAmCGH,IAnCH,CAmCQ,UAAAc,IAAI;AAAA,aAAItB,QAAQ,CAAC;AAACC,QAAAA,IAAI,EAAC,iCAAN;AAAyCsB,QAAAA,OAAO,EAACD;AAAjD,OAAD,CAAZ;AAAA,KAnCZ,EAoCGE,KApCH,CAoCS,UAAAC,KAAK;AAAA,aAAIzB,QAAQ,CAAC;AAACC,QAAAA,IAAI,EAAE,gCAAP;AAAyCsB,QAAAA,OAAO,EAACE;AAAjD,OAAD,CAAZ;AAAA,KApCd;AAqCH,GAxCiC;AAAA,CAAlC;;AA0CA,eAAe5B,0BAAf","sourcesContent":["const loadCurrentBoardListAction =(boardId, idToken) =>(dispatch) =>{\n\n    dispatch({type: \"LOAD_CURRENT_BOARD_LIST_PENDING\"});\n    fetch('http://localhost:3001/loadCurrentBoardList',\n      {\n        method: 'post',\n        headers: {\n          'Content-type': 'application/json',\n          \"Authorization\": idToken\n        },\n        body:JSON.stringify({\n            boardId: boardId\n          })\n      })\n      .then(response =>{\n        return response.json()\n      })\n      .then(async lists => {     \n        console.log(\"hello \" + lists) \n        await Promise.all(lists.map(async list => {\n            let response = await fetch('http://localhost:3001/loadCards',\n                {\n                    method: 'post',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        \"Authorization\": idToken\n                    },\n                    body: JSON.stringify({\n                        listId: list.listid\n                    })\n                });\n            let newcards = await response.json()\n            list.cards  = newcards\n        }))\n\n        console.log(\"lists \" + JSON.stringify(lists))\n        return lists;\n    })\n      .then(data => dispatch({type:\"LOAD_CURRENT_BOARD_LIST_SUCCESS\", payload:data}))\n      .catch(error => dispatch({type: 'LOAD_CURRENT_BOARD_LIST_FAILED', payload:error }))\n}\n\nexport default loadCurrentBoardListAction;"]},"metadata":{},"sourceType":"module"}