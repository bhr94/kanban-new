{"ast":null,"code":"import _slicedToArray from \"/Users/baharmutadayin/Documents/kanban-new/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/Users/baharmutadayin/Documents/kanban-new/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/baharmutadayin/Documents/kanban-new/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Users/baharmutadayin/Documents/kanban-new/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/baharmutadayin/Documents/kanban-new/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/baharmutadayin/Documents/kanban-new/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/baharmutadayin/Documents/kanban-new/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/baharmutadayin/Documents/kanban-new/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/baharmutadayin/Documents/kanban-new/src/views/examples/BoardPage.js\";\nimport React from \"react\";\nimport \"tachyons\";\nimport Modal from \"react-modal\";\nimport { Button, Spinner } from \"reactstrap\";\nimport CardList from \"./CardList\";\nimport Card from \"./Card\";\nimport \"../../style.css\";\nimport Scroll from \"./Scroll\";\nimport { connect } from \"react-redux\";\nimport createListAction from \"../../redux/actions/createListAction\";\nimport createCardAction from \"../../redux/actions/createCardAction\";\nimport { Redirect } from \"react-router-dom\";\nimport { Row } from \"reactstrap\";\nimport loadCardsAction from \"../../redux/actions/loadCardsAction\";\nimport UserData from './UserData';\nimport loadCurrentBoardAction from \"../../redux/actions/loadCurrentBoardAction\";\nimport loadCurrentBoardListAction from \"../../redux/actions/loadCurrentBoardListAction\";\nimport addCurrentBoardlistAction from \"../../redux/actions/addCurrentBoardListAction\";\nimport addCurrentBoardCardAction from \"../../redux/actions/addCurrentBoardCardAction\";\nimport updateListTitleAction from \"../../redux/actions/updateListTitleAction\";\nimport updateCardContentAction from \"../../redux/actions/updateCardContentAction\";\nimport \"pattern.css\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport updateListAction from \"../../redux/actions/updateListAction\";\nimport deleteCardFromPreviousListAction from \"../../redux/actions/deleteCardFromPreviousListAction\";\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport { UncontrolledPopover, PopoverHeader, PopoverBody } from 'reactstrap';\n\nvar BoardPage = /*#__PURE__*/function (_React$Component) {\n  _inherits(BoardPage, _React$Component);\n\n  var _super = _createSuper(BoardPage);\n\n  function BoardPage(props) {\n    var _this;\n\n    _classCallCheck(this, BoardPage);\n\n    _this = _super.call(this, props);\n\n    _this.changeEditMode = function () {\n      _this.setState({\n        isInEditMode: !_this.state.isInEditMode\n      });\n    };\n\n    _this.updateComponentValue = function () {\n      _this.setState({\n        isInEditMode: false\n      });\n\n      UserData.updateCurrentBoardTitle(_this.state.value);\n      var bodyContent = JSON.stringify({\n        boardId: UserData.getCurrentBoardId(),\n        newTitle: _this.state.value\n      });\n      fetch('http://localhost:3001/updateBoardTitle', {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json',\n          \"Authorization\": UserData.getToken()\n        },\n        body: bodyContent\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        if (data) {\n          UserData.updateCurrentBoardTitle(data.boardname);\n        }\n      }).catch(function (error) {\n        console.log(error);\n      });\n    };\n\n    _this.renderEditView = function () {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 16\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        defaultValue: UserData.getCurrentBoardTitle(),\n        ref: \"theTextInput\",\n        onChange: _this.newValue,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Button, {\n        variant: \"primary\",\n        className: \"addCardButton\",\n        onClick: _this.changeEditMode,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }\n      }, \"X\"), /*#__PURE__*/React.createElement(Button, {\n        variant: \"primary\",\n        className: \"cancelButton\",\n        onClick: _this.updateComponentValue,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }\n      }, \"\\u2714\"));\n    };\n\n    _this.newValue = function (e) {\n      _this.setState({\n        value: e.target.value\n      });\n    };\n\n    _this.renderDefaultView = function () {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        onClick: _this.changeEditMode,\n        className: \"boardTitle\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 16\n        }\n      }, UserData.getCurrentBoardTitle());\n    };\n\n    _this.closeCardModal = function (i) {\n      _this.setState(function (prevState) {\n        return {\n          addCardMode: _objectSpread(_objectSpread({}, prevState.addCardMode), {}, {\n            // keep all other key-value pairs\n            listId: i,\n            isAddCardOpen: !prevState.addCardMode.isAddCardOpen\n          })\n        };\n      });\n    };\n\n    _this.openModal = function () {\n      _this.setState({\n        modalIsOpen: true\n      });\n    };\n\n    _this.closeModal = function () {\n      _this.setState({\n        modalIsOpen: false\n      });\n    };\n\n    _this.inputOnChange = function (event) {\n      _this.setState({\n        input: event.target.value\n      });\n    };\n\n    _this.addList = function () {\n      _this.setState({\n        modalIsOpen: false\n      });\n\n      if (_this.state.input.length > 0) {\n        var bodyContent = JSON.stringify({\n          boardId: UserData.getCurrentBoardId(),\n          listTitle: _this.state.input\n        });\n        fetch('http://localhost:3001/createList', {\n          method: 'post',\n          headers: {\n            'Content-Type': 'application/json',\n            \"Authorization\": UserData.getToken()\n          },\n          body: bodyContent\n        }).then(function (response) {\n          return response.json();\n        }).then(function (data) {\n          if (data) {\n            _this.props.addCurrentBoardList(data);\n          }\n        }).catch(function (error) {\n          console.log(error);\n        });\n      } else {\n        alert(\"please enter a list title...\");\n\n        _this.setState({\n          modalIsOpen: true\n        });\n      }\n\n      _this.setState({\n        input: \"\"\n      });\n    };\n\n    _this.cardTitleOnChange = function (event) {\n      _this.setState({\n        cardTitle: event.target.value\n      });\n    };\n\n    _this.addCard = function (i) {\n      if (_this.state.cardTitle.length > 0) {\n        var bodyContent = JSON.stringify({\n          listId: _this.props.currentBoard.lists[i].listid,\n          cardContent: _this.state.cardTitle\n        });\n        fetch('http://localhost:3001/createCard', {\n          method: \"post\",\n          headers: {\n            'Content-Type': 'application/json',\n            \"Authorization\": UserData.getToken()\n          },\n          body: bodyContent\n        }).then(function (response) {\n          return response.json();\n        }).then(function (data) {\n          _this.props.addCurrentBoardCard(data, _this.props.currentBoard.lists[i].listid);\n\n          _this.setState({\n            cardTitle: \"\"\n          });\n        });\n\n        _this.setState(function (prevState) {\n          return {\n            addCardMode: _objectSpread(_objectSpread({}, prevState.addCardMode), {}, {\n              listId: i,\n              isAddCardOpen: !prevState.addCardMode.isAddCardOpen\n            })\n          };\n        });\n      } else {\n        alert(\"enter card content\");\n\n        _this.setState({\n          cardTitle: \"\"\n        });\n      }\n    };\n\n    _this.changeListEditMode = function (i) {\n      _this.setState(function (prevState) {\n        return {\n          listEdit: _objectSpread(_objectSpread({}, prevState.listEdit), {}, {\n            // keep all other key-value pairs\n            listId: i,\n            listEditMode: !prevState.listEdit.listEditMode // update the value of specific key\n\n          })\n        };\n      });\n    };\n\n    _this.updateListTitle = function (listId) {\n      _this.setState(function (prevState) {\n        return {\n          listEdit: _objectSpread(_objectSpread({}, prevState.listEdit), {}, {\n            // keep all other key-value pairs\n            listId: listId,\n            listEditMode: !prevState.listEdit.listEditMode\n          })\n        };\n      });\n\n      if (_this.state.newListTitle.length > 0) {\n        var bodyContent = JSON.stringify({\n          listId: listId,\n          newTitle: _this.state.newListTitle\n        });\n        fetch('http://localhost:3001/updateListTitle', {\n          method: 'post',\n          headers: {\n            'Content-Type': 'application/json',\n            \"Authorization\": UserData.getToken()\n          },\n          body: bodyContent\n        }).then(function (response) {\n          return response.json();\n        }).then(function (data) {\n          if (data) {\n            _this.props.updateListTitle(listId, data);\n          }\n        }).catch(function (error) {\n          console.log(error);\n        });\n      }\n\n      _this.setState({\n        newListTitle: ''\n      });\n    };\n\n    _this.onListTitleChange = function (e) {\n      _this.setState({\n        newListTitle: e.target.value\n      });\n    };\n\n    _this.openCardEditMode = function (cardId) {\n      _this.setState(function (prevState) {\n        return {\n          editCardMode: _objectSpread(_objectSpread({}, prevState.editCardMode), {}, {\n            cardId: cardId,\n            isEditCardOpen: !prevState.editCardMode.isEditCardOpen // update the value of specific key\n\n          })\n        };\n      });\n    };\n\n    _this.updateCard = function (cardId) {\n      _this.setState(function (prevState) {\n        return {\n          editCardMode: _objectSpread(_objectSpread({}, prevState.editCardMode), {}, {\n            // keep all other key-value pairs\n            cardId: cardId,\n            isEditCardOpen: !prevState.editCardMode.isEditCardOpen // update the value of specific key\n\n          })\n        };\n      });\n\n      if (_this.state.newCardContent.length > 0) {\n        var bodyContent = JSON.stringify({\n          cardId: cardId,\n          newCardContent: _this.state.newCardContent\n        });\n        fetch('http://localhost:3001/updateCardContent', {\n          method: 'post',\n          headers: {\n            'Content-Type': 'application/json',\n            \"Authorization\": UserData.getToken()\n          },\n          body: bodyContent\n        }).then(function (response) {\n          return response.json();\n        }).then(function (data) {\n          if (data) {\n            _this.props.updateCardContent(cardId, data);\n\n            _this.setState({\n              newCardContent: ''\n            });\n          }\n        }).catch(function (error) {\n          console.log(error);\n        });\n      }\n    };\n\n    _this.cardEditOnChange = function (e) {\n      _this.setState({\n        newCardContent: e.target.value\n      });\n    };\n\n    _this.openDropDown = function () {\n      _this.setState({\n        dropDownOpen: !_this.state.dropDownOpen\n      });\n    };\n\n    _this.onDragEnd = function (result, lists) {\n      console.log(lists);\n      if (!result.destination) return;\n      var source = result.source,\n          destination = result.destination;\n      console.log(\"result \" + JSON.stringify(result.source));\n\n      if (source.droppableId !== destination.droppableId) {\n        var sourceList = lists[source.droppableId];\n        var destList = lists[destination.droppableId];\n\n        var sourceCards = _toConsumableArray(sourceList.cards);\n\n        var destCards = _toConsumableArray(destList.cards);\n\n        var _sourceCards$splice = sourceCards.splice(source.index, 1),\n            _sourceCards$splice2 = _slicedToArray(_sourceCards$splice, 1),\n            removed = _sourceCards$splice2[0];\n\n        destCards.splice(destination.index, 0, removed);\n        var cardId = destCards[destination.index].cardid;\n        var bodyContent = JSON.stringify({\n          cardId: cardId,\n          listId: destList.listid\n        });\n        fetch('http://localhost:3001/dragCard', {\n          method: 'post',\n          headers: {\n            'Content-Type': 'application/json',\n            \"Authorization\": UserData.getToken()\n          },\n          body: bodyContent\n        }).then(function (response) {\n          return response.json();\n        }).then(function (data) {\n          if (data) {\n            _this.props.updateList(data);\n\n            _this.props.deleteCardFromList(sourceList.listid, data);\n\n            Object.assign(_this.state.lists, _this.props.currentBoard.lists);\n          }\n        }).catch(function (error) {\n          console.log(error);\n        });\n\n        _this.setState(_objectSpread(_objectSpread({}, lists), {}, {\n          [source.droppableId]: _objectSpread(_objectSpread({}, sourceList), {}, {\n            cards: sourceCards\n          }),\n          [destination.droppableId]: _objectSpread(_objectSpread({}, destList), {}, {\n            cards: destCards\n          })\n        }));\n      } else {\n        var list = lists[source.droppableId];\n\n        var copiedCards = _toConsumableArray(list.cards);\n\n        var _copiedCards$splice = copiedCards.splice(source.index, 1),\n            _copiedCards$splice2 = _slicedToArray(_copiedCards$splice, 1),\n            _removed = _copiedCards$splice2[0];\n\n        copiedCards.splice(destination.index, 0, _removed);\n\n        _this.setState(_objectSpread(_objectSpread({}, lists), {}, {\n          [source.droppableId]: _objectSpread(_objectSpread({}, list), {}, {\n            cards: copiedCards\n          })\n        }));\n      }\n    };\n\n    _this.state = {\n      modalIsOpen: false,\n      input: \"\",\n      cardTitle: \"\",\n      list: false,\n      isInEditMode: false,\n      value: UserData.getCurrentBoardTitle(),\n      lists: [],\n      listEdit: {\n        listId: null,\n        listEditMode: false\n      },\n      newListTitle: '',\n      addCardMode: {\n        listId: null,\n        isAddCardOpen: false\n      },\n      editCardMode: {\n        cardId: null,\n        isEditCardOpen: false\n      },\n      newCardContent: '',\n      dropDownOpen: false,\n      lists: {}\n    };\n    return _this;\n  }\n\n  _createClass(BoardPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.loadCurrentBoardList(this.props.match.params.boardId, UserData.getToken());\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var lists = [];\n\n      if (!this.props.isCurrentBoardListPending) {\n        lists = this.props.currentBoard.lists;\n        Object.assign(this.state.lists, this.props.currentBoard.lists);\n        console.log(\"render  this.state.lists \" + JSON.stringify(this.state.lists));\n      }\n\n      if (UserData.getToken()) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"nav\", {\n          className: \"dt w-100 border-box ph5-ns b--white-10\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 449,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"a\", {\n          className: \"dtc v-mid mid-gray link dim w-25\",\n          href: \"#\",\n          title: \"Home\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          src: \"http://tachyons.io/img/logo.jpg\",\n          className: \"dib w2 h2 br-100\",\n          alt: \"Site Name\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 29\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"dtc v-mid w-75 tr\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"a\", {\n          className: \"link dim white f6 f5-ns dib mr3 mr4-ns\",\n          href: \"/user-profile\",\n          title: \"Boards\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 29\n          }\n        }, \"Boards\"), /*#__PURE__*/React.createElement(\"a\", {\n          className: \"link dim white f6 f5-ns dib mr3 mr4-ns\",\n          href: \"/landing-page\",\n          title: \"Home\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 29\n          }\n        }, \"Home\"))), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"board-header-btn mod-board-name\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 21\n          }\n        }, this.state.isInEditMode ? this.renderEditView() : this.renderDefaultView()), /*#__PURE__*/React.createElement(DndProvider, {\n          backend: HTML5Backend,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(DragDropContext, {\n          onDragEnd: function onDragEnd(result) {\n            return _this2.onDragEnd(result, _this2.state.lists);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"board-canvas board pattern-dots-lg\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"js-no-higher-edits js-list-sortable \",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 33\n          }\n        }, this.props.isCurrentBoardListPending ? /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 472,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(\"h1\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 473,\n            columnNumber: 45\n          }\n        }, \"Loading...\"), /*#__PURE__*/React.createElement(Spinner, {\n          color: \"secondary\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 45\n          }\n        })) : lists.map(function (list, i) {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            className: \"list list-wrapper\",\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 477,\n              columnNumber: 52\n            }\n          }, _this2.state.listEdit.listEditMode && _this2.state.listEdit.listId === list.listid ? /*#__PURE__*/React.createElement(\"div\", {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 479,\n              columnNumber: 53\n            }\n          }, /*#__PURE__*/React.createElement(\"input\", {\n            type: \"text\",\n            defaultValue: list.listtitle,\n            ref: \"theTextInput\",\n            onChange: _this2.onListTitleChange,\n            className: \"flist-name-input\",\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 480,\n              columnNumber: 57\n            }\n          }), /*#__PURE__*/React.createElement(Button, {\n            variant: \"primary\",\n            className: \"addCardButton\",\n            onClick: function onClick() {\n              return _this2.changeListEditMode(list.listid);\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 487,\n              columnNumber: 57\n            }\n          }, \"X\"), /*#__PURE__*/React.createElement(Button, {\n            variant: \"primary\",\n            className: \"cancelButton\",\n            onClick: function onClick() {\n              return _this2.updateListTitle(list.listid);\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 488,\n              columnNumber: 57\n            }\n          }, \"\\u2714\")) : /*#__PURE__*/React.createElement(\"div\", {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 490,\n              columnNumber: 53\n            }\n          }, /*#__PURE__*/React.createElement(CardList, {\n            title: list.listtitle,\n            id: list.listid,\n            key: list.listid,\n            changeListEditMode: function changeListEditMode() {\n              return _this2.changeListEditMode(list.listid);\n            } // openCardModal={this.openCardModal}\n            ,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 491,\n              columnNumber: 57\n            }\n          })), /*#__PURE__*/React.createElement(Droppable, {\n            droppableId: i.toString(),\n            key: list.listid,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 508,\n              columnNumber: 49\n            }\n          }, function (provided, snapshot) {\n            return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n              className: \"list list-wrapper\"\n            }, provided.droppableProps, {\n              ref: provided.innerRef,\n              inputRef: React.createRef(null),\n              style: {\n                background: snapshot.isDraggingOver ? \"yellow\" : null\n              },\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 510,\n                columnNumber: 57\n              }\n            }), /*#__PURE__*/React.createElement(\"div\", {\n              className: \"u-clearfix list-cards\",\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 520,\n                columnNumber: 61\n              }\n            }, list.cards.map(function (card, index) {\n              return /*#__PURE__*/React.createElement(Draggable, {\n                key: card.cardid,\n                draggableId: card.cardid.toString(),\n                index: index,\n                __self: _this2,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 524,\n                  columnNumber: 80\n                }\n              }, function (provided, snapshot) {\n                return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n                  // style={{\n                  //     userSelect: \"none\",\n                  //     margin: \"0 0 8px 0\",\n                  //     minHeight: \"50px\",\n                  //     backgroundColor: snapshot.isDragging\n                  //         ? \"#263B4A\"\n                  //         : \"#456C86\",\n                  //     ...provided.draggableProps.style\n                  // }}\n                  ref: provided.innerRef\n                }, provided.draggableProps, provided.dragHandleProps, {\n                  __self: _this2,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 530,\n                    columnNumber: 81\n                  }\n                }), _this2.state.editCardMode.isEditCardOpen && _this2.state.editCardMode.cardId === card.cardid ? /*#__PURE__*/React.createElement(\"div\", {\n                  __self: _this2,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 545,\n                    columnNumber: 89\n                  }\n                }, /*#__PURE__*/React.createElement(\"textarea\", {\n                  type: \"text\",\n                  defaultValue: card.cardcontent // ref=\"theTextInput\"\n                  ,\n                  onChange: _this2.cardEditOnChange,\n                  className: \"add-item\",\n                  __self: _this2,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 546,\n                    columnNumber: 93\n                  }\n                }), /*#__PURE__*/React.createElement(Button, {\n                  variant: \"primary\",\n                  className: \"addCardButton\",\n                  onClick: function onClick() {\n                    return _this2.openCardEditMode(card.cardid);\n                  },\n                  __self: _this2,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 553,\n                    columnNumber: 93\n                  }\n                }, \"X\"), /*#__PURE__*/React.createElement(Button, {\n                  variant: \"primary\",\n                  className: \"cancelButton\",\n                  onClick: function onClick() {\n                    return _this2.updateCard(card.cardid);\n                  },\n                  __self: _this2,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 554,\n                    columnNumber: 93\n                  }\n                }, \"\\u2714\")) : /*#__PURE__*/React.createElement(\"div\", {\n                  className: \"f5 lh-copy measure-narrow list-card\",\n                  id: card.cardId,\n                  key: card.cardId,\n                  onClick: function onClick() {\n                    return _this2.openCardEditMode(card.cardid);\n                  },\n                  __self: _this2,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 556,\n                    columnNumber: 93\n                  }\n                }, card.cardcontent));\n              });\n            })), provided.placeholder);\n          }), _this2.state.addCardMode.isAddCardOpen && _this2.state.addCardMode.listId === i ? /*#__PURE__*/React.createElement(\"div\", {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 580,\n              columnNumber: 57\n            }\n          }, /*#__PURE__*/React.createElement(\"textarea\", {\n            type: \"text\",\n            placeholder: \"enter card title...\",\n            onChange: _this2.cardTitleOnChange,\n            className: \"add-item\",\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 581,\n              columnNumber: 61\n            }\n          }), /*#__PURE__*/React.createElement(Button, {\n            variant: \"primary\",\n            className: \"addCardButton\",\n            onClick: function onClick() {\n              return _this2.addCard(i);\n            },\n            type: \"submit\",\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 587,\n              columnNumber: 61\n            }\n          }, \"add card\"), /*#__PURE__*/React.createElement(Button, {\n            variant: \"secondary\",\n            className: \"cancelButton\",\n            onClick: function onClick() {\n              return _this2.closeCardModal(i);\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 588,\n              columnNumber: 61\n            }\n          }, \"X\")) : /*#__PURE__*/React.createElement(\"div\", {\n            className: \"card-composer-container js-card-composer-container dark-background-hover\",\n            onClick: function onClick() {\n              return _this2.closeCardModal(i);\n            },\n            type: \"submit\",\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 591,\n              columnNumber: 57\n            }\n          }, /*#__PURE__*/React.createElement(\"a\", {\n            className: \"open-card-composer js-open-card-composer\",\n            href: \"#\",\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 592,\n              columnNumber: 61\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"icon-sm icon-add\",\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 593,\n              columnNumber: 65\n            }\n          }, \"+\"), /*#__PURE__*/React.createElement(\"span\", {\n            className: \"js-add-another-card\",\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 597,\n              columnNumber: 65\n            }\n          }, \"  Add another card\")), /*#__PURE__*/React.createElement(\"div\", {\n            className: \"js-card-templates-button card-templates-button-container dark-background-hover\",\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 599,\n              columnNumber: 61\n            }\n          }, /*#__PURE__*/React.createElement(\"div\", {\n            className: \"js-react-root\",\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 600,\n              columnNumber: 65\n            }\n          }, /*#__PURE__*/React.createElement(\"div\", {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 601,\n              columnNumber: 69\n            }\n          }, /*#__PURE__*/React.createElement(\"a\", {\n            className: \"_2arBFfwXVxA0AM\",\n            role: \"button\",\n            href: \"#\",\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 601,\n              columnNumber: 74\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"icon-sm icon-template-card dark-background-hover\",\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 602,\n              columnNumber: 73\n            }\n          })))))));\n        }), this.state.modalIsOpen ? /*#__PURE__*/React.createElement(\"div\", {\n          isOpen: this.state.modalIsOpen,\n          className: \"js-add-list list-wrapper mod-add\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 619,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(\"form\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 620,\n            columnNumber: 45\n          }\n        }, /*#__PURE__*/React.createElement(\"a\", {\n          class: \"open-add-list js-open-add-list\",\n          href: \"#\",\n          tabindex: \"-1\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 621,\n            columnNumber: 49\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          class: \"placeholder\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 623,\n            columnNumber: 53\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          class: \"icon-sm icon-add\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 624,\n            columnNumber: 57\n          }\n        }), \"Add another list\")), /*#__PURE__*/React.createElement(\"input\", {\n          className: \"list-name-input\",\n          type: \"text\",\n          name: \"name\",\n          placeholder: \"Enter list title...\",\n          autocomplete: \"off\",\n          dir: \"auto\",\n          maxlength: \"512\",\n          onChange: this.inputOnChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 627,\n            columnNumber: 49\n          }\n        }), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"list-add-controls u-clearfix\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 633,\n            columnNumber: 49\n          }\n        }), /*#__PURE__*/React.createElement(\"input\", {\n          className: \"primary mod-list-add-button js-save-edit\",\n          type: \"submit\",\n          value: \"Add List\",\n          onClick: this.addList,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 634,\n            columnNumber: 49\n          }\n        }), /*#__PURE__*/React.createElement(\"a\", {\n          className: \"icon-lg icon-close dark-hover js-cancel-edit\",\n          href: \"#\",\n          onClick: this.closeModal,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 636,\n            columnNumber: 49\n          }\n        }, \"X\"))) : /*#__PURE__*/React.createElement(Button, {\n          onClick: this.openModal,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 641,\n            columnNumber: 41\n          }\n        }, \"+ Add another list\") //  this.props.isListsPending?\n        )))));\n      } else {\n        return /*#__PURE__*/React.createElement(Redirect, {\n          to: \"/landing-page\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 656,\n            columnNumber: 17\n          }\n        });\n      }\n    }\n  }]);\n\n  return BoardPage;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state, ownProps) {\n  var boardId = parseInt(ownProps.match.params.boardId);\n  return {\n    boards: state.boards,\n    board: state.boards.find(function (board) {\n      return board.boardId === boardId;\n    }),\n    user: state.user,\n    boardId: boardId,\n    isListsPending: state.isListsPending,\n    listsLoadError: state.listsLoadError,\n    isBoardsPending: state.isBoardsPending,\n    currentBoard: state.currentBoard,\n    isCurrentBoardListPending: state.isCurrentBoardListPending,\n    state: state\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    createList: function createList(listTitle, boardId, listId) {\n      return dispatch(createListAction(listTitle, boardId, listId));\n    },\n    createCard: function createCard(cardContent, listId, boardId, cardId) {\n      return dispatch(createCardAction(cardContent, listId, boardId, cardId));\n    },\n    loadCards: function loadCards(listId, boardId, idToken) {\n      return dispatch(loadCardsAction(listId, boardId, idToken));\n    },\n    loadCurrentBoard: function loadCurrentBoard(boardId, token) {\n      return dispatch(loadCurrentBoardAction(boardId, token));\n    },\n    loadCurrentBoardList: function loadCurrentBoardList(boardId, idToken) {\n      return dispatch(loadCurrentBoardListAction(boardId, idToken));\n    },\n    addCurrentBoardList: function addCurrentBoardList(list) {\n      return dispatch(addCurrentBoardlistAction(list));\n    },\n    addCurrentBoardCard: function addCurrentBoardCard(data, listId) {\n      return dispatch(addCurrentBoardCardAction(data, listId));\n    },\n    updateListTitle: function updateListTitle(listId, data) {\n      return dispatch(updateListTitleAction(listId, data));\n    },\n    updateCardContent: function updateCardContent(cardId, data) {\n      return dispatch(updateCardContentAction(cardId, data));\n    },\n    updateList: function updateList(data) {\n      return dispatch(updateListAction(data));\n    },\n    deleteCardFromList: function deleteCardFromList(sourceListId, data) {\n      return dispatch(deleteCardFromPreviousListAction(sourceListId, data));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BoardPage);","map":{"version":3,"sources":["/Users/baharmutadayin/Documents/kanban-new/src/views/examples/BoardPage.js"],"names":["React","Modal","Button","Spinner","CardList","Card","Scroll","connect","createListAction","createCardAction","Redirect","Row","loadCardsAction","UserData","loadCurrentBoardAction","loadCurrentBoardListAction","addCurrentBoardlistAction","addCurrentBoardCardAction","updateListTitleAction","updateCardContentAction","DragDropContext","Draggable","Droppable","updateListAction","deleteCardFromPreviousListAction","DndProvider","HTML5Backend","UncontrolledPopover","PopoverHeader","PopoverBody","BoardPage","props","changeEditMode","setState","isInEditMode","state","updateComponentValue","updateCurrentBoardTitle","value","bodyContent","JSON","stringify","boardId","getCurrentBoardId","newTitle","fetch","method","headers","getToken","body","then","response","json","data","boardname","catch","error","console","log","renderEditView","getCurrentBoardTitle","newValue","e","target","renderDefaultView","closeCardModal","i","prevState","addCardMode","listId","isAddCardOpen","openModal","modalIsOpen","closeModal","inputOnChange","event","input","addList","length","listTitle","addCurrentBoardList","alert","cardTitleOnChange","cardTitle","addCard","currentBoard","lists","listid","cardContent","addCurrentBoardCard","changeListEditMode","listEdit","listEditMode","updateListTitle","newListTitle","onListTitleChange","openCardEditMode","cardId","editCardMode","isEditCardOpen","updateCard","newCardContent","updateCardContent","cardEditOnChange","openDropDown","dropDownOpen","onDragEnd","result","destination","source","droppableId","sourceList","destList","sourceCards","cards","destCards","splice","index","removed","cardid","updateList","deleteCardFromList","Object","assign","list","copiedCards","loadCurrentBoardList","match","params","isCurrentBoardListPending","map","listtitle","toString","provided","snapshot","droppableProps","innerRef","createRef","background","isDraggingOver","card","draggableProps","dragHandleProps","cardcontent","placeholder","Component","mapStateToProps","ownProps","parseInt","boards","board","find","user","isListsPending","listsLoadError","isBoardsPending","mapDispatchToProps","dispatch","createList","createCard","loadCards","idToken","loadCurrentBoard","token","sourceListId"],"mappings":"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","sourcesContent":["\n\nimport React from \"react\";\nimport \"tachyons\"\nimport Modal from \"react-modal\"\nimport { Button, Spinner } from \"reactstrap\"\nimport CardList from \"./CardList\"\nimport Card from \"./Card\"\nimport \"../../style.css\"\nimport Scroll from \"./Scroll\"\nimport { connect } from \"react-redux\"\nimport createListAction from \"../../redux/actions/createListAction\"\nimport createCardAction from \"../../redux/actions/createCardAction\"\nimport { Redirect } from \"react-router-dom\";\nimport { Row } from \"reactstrap\";\nimport loadCardsAction from \"../../redux/actions/loadCardsAction\";\nimport UserData from './UserData';\nimport loadCurrentBoardAction from \"../../redux/actions/loadCurrentBoardAction\"\nimport loadCurrentBoardListAction from \"../../redux/actions/loadCurrentBoardListAction\"\nimport addCurrentBoardlistAction from \"../../redux/actions/addCurrentBoardListAction\"\nimport addCurrentBoardCardAction from \"../../redux/actions/addCurrentBoardCardAction\"\nimport updateListTitleAction from \"../../redux/actions/updateListTitleAction\"\nimport updateCardContentAction from \"../../redux/actions/updateCardContentAction\"\nimport \"pattern.css\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport updateListAction from \"../../redux/actions/updateListAction\";\nimport deleteCardFromPreviousListAction from \"../../redux/actions/deleteCardFromPreviousListAction\"\nimport { DndProvider } from 'react-dnd'\nimport { HTML5Backend } from 'react-dnd-html5-backend'\nimport { UncontrolledPopover, PopoverHeader, PopoverBody } from 'reactstrap';\n\n\n\n\nclass BoardPage extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            modalIsOpen: false,\n            input: \"\",\n            cardTitle: \"\",\n            list: false,\n            isInEditMode: false,\n            value: UserData.getCurrentBoardTitle(),\n            lists: [],\n            listEdit: {\n                listId: null,\n                listEditMode: false\n            },\n            newListTitle: '',\n            addCardMode: {\n                listId: null,\n                isAddCardOpen: false,\n            },\n            editCardMode: {\n                cardId: null,\n                isEditCardOpen: false\n            },\n            newCardContent: '',\n            dropDownOpen: false,\n            lists: {}\n\n        }\n\n    }\n\n    changeEditMode = () => {\n        this.setState({\n            isInEditMode: !this.state.isInEditMode\n        })\n    }\n\n\n    updateComponentValue = () => {\n        this.setState({\n            isInEditMode: false,\n        })\n        UserData.updateCurrentBoardTitle(this.state.value)\n        const bodyContent = JSON.stringify({\n            boardId: UserData.getCurrentBoardId(),\n            newTitle: this.state.value\n        })\n\n        fetch('http://localhost:3001/updateBoardTitle',\n            {\n                method: 'post',\n                headers: {\n                    'Content-Type': 'application/json',\n                    \"Authorization\": UserData.getToken()\n                },\n                body: bodyContent\n            })\n            .then(response => {\n                return response.json()\n            })\n            .then(data => {\n                if (data) {\n                    UserData.updateCurrentBoardTitle(data.boardname)\n                }\n            })\n            .catch(error => {\n                console.log(error)\n            })\n    }\n\n\n\n    renderEditView = () => {\n        return <div>\n            <input\n                type=\"text\"\n                defaultValue={UserData.getCurrentBoardTitle()}\n                ref=\"theTextInput\"\n                onChange={this.newValue}\n            />\n            <Button variant=\"primary\" className=\"addCardButton\" onClick={this.changeEditMode}>X</Button>\n            <Button variant=\"primary\" className=\"cancelButton\" onClick={this.updateComponentValue}>✔</Button>\n        </div>\n    }\n\n\n\n\n    newValue = (e) => {\n        this.setState({ value: e.target.value })\n    }\n\n\n    renderDefaultView = () => {\n        return <div onClick={this.changeEditMode} className=\"boardTitle\">\n            {UserData.getCurrentBoardTitle()}\n        </div>\n    }\n\n\n    closeCardModal = (i) => {\n        this.setState(prevState => ({\n            addCardMode: {                   // object that we want to update\n                ...prevState.addCardMode,    // keep all other key-value pairs\n                listId: i,\n                isAddCardOpen: !prevState.addCardMode.isAddCardOpen\n            }\n        }))\n    }\n\n    openModal = () => {\n        this.setState({ modalIsOpen: true })\n    }\n\n    closeModal = () => {\n        this.setState({ modalIsOpen: false })\n    }\n\n    inputOnChange = (event) => {\n        this.setState({ input: event.target.value })\n    }\n\n    addList = () => {\n        this.setState({ modalIsOpen: false })\n        if (this.state.input.length > 0) {\n            const bodyContent = JSON.stringify({\n                boardId: UserData.getCurrentBoardId(),\n                listTitle: this.state.input\n            })\n            fetch('http://localhost:3001/createList',\n                {\n                    method: 'post',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        \"Authorization\": UserData.getToken()\n                    },\n                    body: bodyContent\n                }\n            )\n                .then(response => {\n                    return response.json()\n                })\n                .then(data => {\n                    if (data) {\n                        this.props.addCurrentBoardList(data)\n                    }\n                })\n                .catch(error => {\n                    console.log(error)\n                })\n        }\n        else {\n            alert(\"please enter a list title...\")\n            this.setState({ modalIsOpen: true })\n        }\n        this.setState({ input: \"\" })\n    }\n\n    componentDidMount() {\n        this.props.loadCurrentBoardList(this.props.match.params.boardId, UserData.getToken())\n    }\n\n    cardTitleOnChange = (event) => {\n        this.setState({ cardTitle: event.target.value })\n    }\n\n    addCard = (i) => {\n        if (this.state.cardTitle.length > 0) {\n            const bodyContent = JSON.stringify({\n                listId: this.props.currentBoard.lists[i].listid,\n                cardContent: this.state.cardTitle\n            })\n\n            fetch('http://localhost:3001/createCard',\n                {\n                    method: \"post\",\n                    headers: {\n                        'Content-Type': 'application/json',\n                        \"Authorization\": UserData.getToken()\n                    },\n                    body: bodyContent\n\n                }\n            )\n                .then(response => {\n                    return response.json()\n                })\n                .then(data => {\n                    this.props.addCurrentBoardCard(data, this.props.currentBoard.lists[i].listid)\n                    this.setState({ cardTitle: \"\" })\n                })\n\n            this.setState(prevState => ({\n                addCardMode: {\n                    ...prevState.addCardMode,\n                    listId: i,\n                    isAddCardOpen: !prevState.addCardMode.isAddCardOpen\n                }\n            }))\n        }\n        else {\n            alert(\"enter card content\")\n            this.setState({ cardTitle: \"\" })\n        }\n\n    }\n\n    changeListEditMode = (i) => {\n        this.setState(prevState => ({\n            listEdit: {                   // object that we want to update\n                ...prevState.listEdit,    // keep all other key-value pairs\n                listId: i,\n                listEditMode: !prevState.listEdit.listEditMode                       // update the value of specific key\n            }\n        }))\n    }\n\n    updateListTitle = (listId) => {\n        this.setState(prevState => ({\n            listEdit: {                   // object that we want to update\n                ...prevState.listEdit,    // keep all other key-value pairs\n                listId: listId,\n                listEditMode: !prevState.listEdit.listEditMode,\n            }\n        }))\n        if (this.state.newListTitle.length > 0) {\n            const bodyContent = JSON.stringify({\n                listId: listId,\n                newTitle: this.state.newListTitle\n            })\n\n            fetch('http://localhost:3001/updateListTitle',\n                {\n                    method: 'post',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        \"Authorization\": UserData.getToken()\n                    },\n                    body: bodyContent\n                })\n                .then(response => {\n                    return response.json()\n                })\n                .then(data => {\n                    if (data) {\n                        this.props.updateListTitle(listId, data)\n                    }\n                })\n                .catch(error => {\n                    console.log(error)\n                })\n        }\n\n        this.setState({ newListTitle: '' })\n    }\n\n    onListTitleChange = (e) => {\n        this.setState({ newListTitle: e.target.value })\n\n    }\n\n    openCardEditMode = (cardId) => {\n        this.setState(prevState => ({\n            editCardMode: {\n                ...prevState.editCardMode,\n                cardId: cardId,\n                isEditCardOpen: !prevState.editCardMode.isEditCardOpen                       // update the value of specific key\n            }\n        }))\n\n    }\n\n    updateCard = (cardId) => {\n        this.setState(prevState => ({\n            editCardMode: {                   // object that we want to update\n                ...prevState.editCardMode,    // keep all other key-value pairs\n                cardId: cardId,\n                isEditCardOpen: !prevState.editCardMode.isEditCardOpen                       // update the value of specific key\n            }\n        }))\n\n        if (this.state.newCardContent.length > 0) {\n            const bodyContent = JSON.stringify({\n                cardId: cardId,\n                newCardContent: this.state.newCardContent\n            })\n\n            fetch('http://localhost:3001/updateCardContent',\n                {\n                    method: 'post',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        \"Authorization\": UserData.getToken()\n                    },\n                    body: bodyContent\n                })\n                .then(response => {\n                    return response.json()\n                })\n                .then(data => {\n                    if (data) {\n                        this.props.updateCardContent(cardId, data)\n                        this.setState({ newCardContent: '' })\n                    }\n                })\n                .catch(error => {\n                    console.log(error)\n                })\n        }\n    }\n\n    cardEditOnChange = (e) => {\n        this.setState({ newCardContent: e.target.value })\n    }\n\n\n    openDropDown = () => {\n        this.setState({ dropDownOpen: !this.state.dropDownOpen })\n    }\n\n\n    // ------------- Drag and Drop part \n\n    onDragEnd = (result, lists) => {\n        console.log(lists)\n        if (!result.destination) return;\n        const { source, destination } = result;\n        console.log(\"result \" + JSON.stringify(result.source))\n        if (source.droppableId !== destination.droppableId) {\n            const sourceList = lists[source.droppableId];\n            const destList = lists[destination.droppableId];\n            const sourceCards = [...sourceList.cards];\n            const destCards = [...destList.cards];\n            const [removed] = sourceCards.splice(source.index, 1);\n            destCards.splice(destination.index, 0, removed);\n            let cardId = destCards[destination.index].cardid;\n\n            const bodyContent = JSON.stringify({\n                cardId: cardId,\n                listId: destList.listid\n            })\n\n            fetch('http://localhost:3001/dragCard',\n                {\n                    method: 'post',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        \"Authorization\": UserData.getToken()\n                    },\n                    body: bodyContent\n                })\n                .then(response => {\n                    return response.json()\n                })\n                .then(data => {\n                    if (data) {\n                        this.props.updateList(data)\n                        this.props.deleteCardFromList(sourceList.listid, data)\n                        Object.assign(this.state.lists, this.props.currentBoard.lists);\n                    }\n                })\n                .catch(error => {\n                    console.log(error)\n                })\n\n\n            this.setState({\n                ...lists,\n                [source.droppableId]: {\n                    ...sourceList,\n                    cards: sourceCards\n                },\n                [destination.droppableId]: {\n                    ...destList,\n                    cards: destCards\n                }\n\n            })\n        } else {\n            const list = lists[source.droppableId];\n            const copiedCards = [...list.cards];\n            const [removed] = copiedCards.splice(source.index, 1);\n            copiedCards.splice(destination.index, 0, removed);\n            this.setState({\n                ...lists,\n                [source.droppableId]: {\n                    ...list,\n                    cards: copiedCards\n                }\n            });\n        }\n\n    };\n\n\n\n\n\n    render() {\n        let lists = [];\n\n        if (!this.props.isCurrentBoardListPending) {\n            lists = this.props.currentBoard.lists;\n            Object.assign(this.state.lists, this.props.currentBoard.lists);\n\n            console.log(\"render  this.state.lists \" + JSON.stringify(this.state.lists))\n        }\n\n        if (UserData.getToken()) {\n            return (\n                <>\n                    <nav className=\"dt w-100 border-box ph5-ns b--white-10\">\n                        <a className=\"dtc v-mid mid-gray link dim w-25\" href=\"#\" title=\"Home\">\n                            <img src=\"http://tachyons.io/img/logo.jpg\" className=\"dib w2 h2 br-100\" alt=\"Site Name\" />\n                        </a>\n                        <div className=\"dtc v-mid w-75 tr\">\n                            <a className=\"link dim white f6 f5-ns dib mr3 mr4-ns\" href='/user-profile' title=\"Boards\">Boards</a>\n                            <a className=\"link dim white f6 f5-ns dib mr3 mr4-ns\" href ='/landing-page' title=\"Home\">Home</a>\n                        </div>\n                    </nav>\n                    {/* <div className=\"board-header\">\n                    </div>    */}\n                    <div className=\"board-header-btn mod-board-name\">\n                        {this.state.isInEditMode ?\n                            this.renderEditView() :\n                            this.renderDefaultView()\n                        }\n                    </div>\n                    {/* </section> */}\n                    <DndProvider backend={HTML5Backend}>\n                        <DragDropContext onDragEnd={(result) => this.onDragEnd(result, this.state.lists)} >\n                            <div className=\"board-canvas board pattern-dots-lg\">\n                                <div className=\"js-no-higher-edits js-list-sortable \">\n                                    {this.props.isCurrentBoardListPending ?\n                                        <div>\n                                            <h1>Loading...</h1>\n                                            <Spinner color=\"secondary\" />\n                                        </div> :\n                                        lists.map((list, i) => {\n                                            return <div className=\"list list-wrapper\" >\n                                                {this.state.listEdit.listEditMode && this.state.listEdit.listId === list.listid ?\n                                                    <div>\n                                                        <input\n                                                            type=\"text\"\n                                                            defaultValue={list.listtitle}\n                                                            ref=\"theTextInput\"\n                                                            onChange={this.onListTitleChange}\n                                                            className=\"flist-name-input\"\n                                                        />\n                                                        <Button variant=\"primary\" className=\"addCardButton\" onClick={() => this.changeListEditMode(list.listid)}>X</Button>\n                                                        <Button variant=\"primary\" className=\"cancelButton\" onClick={() => this.updateListTitle(list.listid)}>✔</Button>\n                                                    </div> :\n                                                    <div>\n                                                        <CardList\n                                                            title={list.listtitle}\n                                                            id={list.listid}\n                                                            key={list.listid}\n                                                            changeListEditMode={() => this.changeListEditMode(list.listid)}\n                                                        // openCardModal={this.openCardModal}\n                                                        />\n                                                        {/* <Button variant=\"secondary\" className=\"deleteButton\" onClick={this.openDropDown}>X</Button> */}\n                                                        {/* <Button id=\"UncontrolledPopover\" type=\"top\">\n                                                        Delete List\n                                                         </Button> */}\n                                                        {/* <UncontrolledPopover placement=\"right\" target=\"UncontrolledPopover\">\n                                                            <PopoverHeader>Popover Title</PopoverHeader>\n                                                            <PopoverBody>Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum.</PopoverBody>\n                                                        </UncontrolledPopover> */}\n                                                    </div>\n                                                }\n                                                <Droppable droppableId={i.toString()} key={list.listid} >\n                                                    {(provided, snapshot) => (\n                                                        <div className=\"list list-wrapper\"\n                                                            {...provided.droppableProps}\n                                                            ref={provided.innerRef}\n                                                            inputRef={React.createRef(null)}\n                                                            style={{\n                                                                background: snapshot.isDraggingOver\n                                                                    ? \"yellow\"\n                                                                    : null\n                                                            }}\n                                                        >\n                                                            <div className=\"u-clearfix list-cards\">\n\n                                                                {\n                                                                    list.cards.map((card, index) => {\n                                                                        return <Draggable\n                                                                            key={card.cardid}\n                                                                            draggableId={card.cardid.toString()}\n                                                                            index={index}\n                                                                        >\n                                                                            {(provided, snapshot) => (\n                                                                                <div\n                                                                                    // style={{\n                                                                                    //     userSelect: \"none\",\n                                                                                    //     margin: \"0 0 8px 0\",\n                                                                                    //     minHeight: \"50px\",\n                                                                                    //     backgroundColor: snapshot.isDragging\n                                                                                    //         ? \"#263B4A\"\n                                                                                    //         : \"#456C86\",\n                                                                                    //     ...provided.draggableProps.style\n                                                                                    // }}\n                                                                                    ref={provided.innerRef}\n                                                                                    {...provided.draggableProps}\n                                                                                    {...provided.dragHandleProps}\n                                                                                >\n                                                                                    {this.state.editCardMode.isEditCardOpen && this.state.editCardMode.cardId === card.cardid ?\n                                                                                        <div>\n                                                                                            <textarea\n                                                                                                type=\"text\"\n                                                                                                defaultValue={card.cardcontent}\n                                                                                                // ref=\"theTextInput\"\n                                                                                                onChange={this.cardEditOnChange}\n                                                                                                className=\"add-item\"\n                                                                                            />\n                                                                                            <Button variant=\"primary\" className=\"addCardButton\" onClick={() => this.openCardEditMode(card.cardid)}>X</Button>\n                                                                                            <Button variant=\"primary\" className=\"cancelButton\" onClick={() => this.updateCard(card.cardid)}>✔</Button>\n                                                                                        </div> :\n                                                                                            <div\n                                                                                                className=\"f5 lh-copy measure-narrow list-card\"\n                                                                                                id={card.cardId}\n                                                                                                key={card.cardId}\n                                                                                                onClick={() => this.openCardEditMode(card.cardid)}\n                                                                                            >\n\n                                                                                                {card.cardcontent}\n\n                                                                                            </div>\n                                                                                    }\n                                                                                </div>\n                                                                            )}\n                                                                        </Draggable>\n                                                                    })}\n                                                            </div>\n                                                            {provided.placeholder}\n                                                        </div>\n                                                    )}\n                                                </Droppable>\n\n                                                {/* ==== */}\n                                                {\n                                                    this.state.addCardMode.isAddCardOpen && this.state.addCardMode.listId === i ?\n                                                        <div>\n                                                            <textarea\n                                                                type=\"text\"\n                                                                placeholder=\"enter card title...\"\n                                                                onChange={this.cardTitleOnChange}\n                                                                className=\"add-item\"\n                                                            />\n                                                            <Button variant=\"primary\" className=\"addCardButton\" onClick={() => this.addCard(i)} type=\"submit\">add card</Button>\n                                                            <Button variant=\"secondary\" className=\"cancelButton\" onClick={() => this.closeCardModal(i)}>X</Button>\n                                                        </div> :\n\n                                                        <div className=\"card-composer-container js-card-composer-container dark-background-hover\" onClick={() => this.closeCardModal(i)} type=\"submit\">\n                                                            <a className=\"open-card-composer js-open-card-composer\" href=\"#\">\n                                                                <span className=\"icon-sm icon-add\">\n                                                                    +\n                                                                             </span>\n                                                                {/* <span className=\"js-add-a-card hide\">Add a card</span> */}\n                                                                <span className=\"js-add-another-card\">  Add another card</span>\n                                                            </a>\n                                                            <div className=\"js-card-templates-button card-templates-button-container dark-background-hover\">\n                                                                <div className=\"js-react-root\">\n                                                                    <div><a className=\"_2arBFfwXVxA0AM\" role=\"button\" href=\"#\">\n                                                                        <span className=\"icon-sm icon-template-card dark-background-hover\">\n                                                                        </span></a></div>\n                                                                </div>\n                                                            </div>\n                                                        </div>\n                                                }\n\n\n                                                {/* ====== */}\n                                            </div>\n\n\n                                        })}\n\n\n\n                                    {this.state.modalIsOpen ?\n                                        <div isOpen={this.state.modalIsOpen} className=\"js-add-list list-wrapper mod-add\">\n                                            <form>\n                                                <a class=\"open-add-list js-open-add-list\"\n                                                    href=\"#\" tabindex=\"-1\">\n                                                    <span class=\"placeholder\">\n                                                        <span class=\"icon-sm icon-add\">\n                                                        </span>Add another list</span>\n                                                </a>\n                                                <input className=\"list-name-input\"\n                                                    type=\"text\" name=\"name\"\n                                                    placeholder=\"Enter list title...\"\n                                                    autocomplete=\"off\" dir=\"auto\"\n                                                    maxlength=\"512\"\n                                                    onChange={this.inputOnChange} />\n                                                <div className=\"list-add-controls u-clearfix\" />\n                                                <input className=\"primary mod-list-add-button js-save-edit\"\n                                                    type=\"submit\" value=\"Add List\" onClick={this.addList} />\n                                                <a className=\"icon-lg icon-close dark-hover js-cancel-edit\" href=\"#\" onClick={this.closeModal}>\n                                                    X\n                                                    </a>\n                                            </form>\n                                        </div> :\n                                        <Button onClick={this.openModal}>\n                                            + Add another list\n                                 </Button>\n                                        //  this.props.isListsPending?\n                                    }\n                                </div>\n                            </div>\n                        </DragDropContext>\n                    </DndProvider>\n\n                </>\n            )\n        }\n        else {\n            return (\n                <Redirect to=\"/landing-page\" />\n            )\n\n        }\n    }\n}\n\n\nconst mapStateToProps = (state, ownProps) => {\n    let boardId = parseInt(ownProps.match.params.boardId);\n\n    return {\n        boards: state.boards,\n        board: state.boards.find(board => board.boardId === boardId),\n        user: state.user,\n        boardId: boardId,\n        isListsPending: state.isListsPending,\n        listsLoadError: state.listsLoadError,\n        isBoardsPending: state.isBoardsPending,\n        currentBoard: state.currentBoard,\n        isCurrentBoardListPending: state.isCurrentBoardListPending,\n        state: state,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        createList: (listTitle, boardId, listId) => dispatch(createListAction(listTitle, boardId, listId)),\n        createCard: (cardContent, listId, boardId, cardId) => dispatch(createCardAction(cardContent, listId, boardId, cardId)),\n        loadCards: (listId, boardId, idToken) => dispatch(loadCardsAction(listId, boardId, idToken)),\n        loadCurrentBoard: (boardId, token) => dispatch(loadCurrentBoardAction(boardId, token)),\n        loadCurrentBoardList: (boardId, idToken) => dispatch(loadCurrentBoardListAction(boardId, idToken)),\n        addCurrentBoardList: (list) => dispatch(addCurrentBoardlistAction(list)),\n        addCurrentBoardCard: (data, listId) => dispatch(addCurrentBoardCardAction(data, listId)),\n        updateListTitle: (listId, data) => dispatch(updateListTitleAction(listId, data)),\n        updateCardContent: (cardId, data) => dispatch(updateCardContentAction(cardId, data)),\n        updateList: (data) => dispatch(updateListAction(data)),\n        deleteCardFromList: (sourceListId, data) => dispatch(deleteCardFromPreviousListAction(sourceListId, data))\n    }\n}\n\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BoardPage)\n\n"]},"metadata":{},"sourceType":"module"}