{"ast":null,"code":"import _objectSpread from \"/Users/baharmutadayin/Documents/kanban-new/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { data } from \"jquery\";\nimport { isConditionalExpression } from \"typescript\";\nvar initialState = {\n  boards: [],\n  isBoardsPending: false,\n  boardsLoadError: '',\n  user: {\n    userId: 0,\n    userName: \"\",\n    email: \"\",\n    idToken: \"\"\n  },\n  isListsPending: false,\n  listsLoadError: '',\n  isCardsPending: false,\n  cardsLoadError: '',\n  isCurrentBoardPending: false,\n  currentBoardLoadError: '',\n  currentBoard: {},\n  isCurrentBoardListPending: true,\n  currentBoardListLoadError: ''\n};\n\nvar rootReducer = function rootReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === \"CREATE_BOARD\") {\n    var board = {\n      boardId: action.payload.boardId,\n      boardTitle: action.payload.boardTitle,\n      lists: []\n    }; // let newBoards = state.boards\n    // newBoards.push(board)\n\n    return _objectSpread(_objectSpread({}, state), {}, {\n      currentBoard: board\n    });\n  }\n\n  if (action.type === \"CREATE_LIST\") {\n    var newBoards = state.boards; // console.log(\"newBoards: \" + JSON.stringify(newBoards))\n\n    newBoards.filter(function (board) {\n      if (action.payload.boardId === board.boardId) {\n        var list = {\n          listId: action.payload.listId,\n          listTitle: action.payload.listTitle,\n          cards: []\n        };\n        board.lists.push(list);\n        return _objectSpread(_objectSpread({}, state), {}, {\n          boards: newBoards\n        });\n      }\n    });\n  }\n\n  if (action.type === \"CREATE_CARD\") {\n    var _newBoards = state.boards;\n\n    _newBoards.filter(function (board) {\n      if (action.payload.boardId === board.boardId) {\n        board.lists.map(function (list) {\n          if (list.listId === action.payload.listId) {\n            var card = {\n              cardId: action.payload.cardId,\n              cardContent: action.payload.cardContent\n            };\n            list.cards.push(card);\n            return _objectSpread(_objectSpread({}, state), {}, {\n              boards: _newBoards\n            });\n          }\n        });\n      }\n    });\n  }\n\n  if (action.type === \"LOAD_USER\") {\n    var newUser = state.user;\n    newUser = {\n      userId: action.payload.userId,\n      userName: action.payload.userName,\n      email: action.payload.email,\n      idToken: action.payload.idToken\n    };\n    return _objectSpread(_objectSpread({}, state), {}, {\n      user: newUser\n    });\n  }\n\n  switch (action.type) {\n    case \"LOAD_BOARDS_PENDING\":\n      return Object.assign({}, state, {\n        isBoardsPending: true\n      });\n\n    case 'LOAD_BOARDS_SUCCESS':\n      var _newBoards2 = state.boards;\n      action.payload.map(function (board) {\n        var newBoard = {\n          boardId: board.boardid,\n          boardTitle: board.boardname,\n          lists: []\n        };\n\n        _newBoards2.push(newBoard);\n      });\n      return Object.assign({}, state, {\n        boards: _newBoards2,\n        isBoardsPending: false\n      });\n\n    case 'LOAD_BOARDS_FAILED':\n      return Object.assign({}, state, {\n        boardsLoadError: action.payload\n      });\n  }\n\n  switch (action.type) {\n    case 'LOAD_LISTS_PENDING':\n      return Object.assign({}, state, {\n        isListsPending: true\n      });\n\n    case 'LOAD_LISTS_SUCCESS':\n      var _newBoards3 = state.boards;\n\n      _newBoards3.map(function (board) {\n        if (board.boardId === action.payload.boardId) {\n          action.payload.lists.map(function (list) {\n            var newList = {\n              listId: list.listid,\n              listTitle: list.listtitle,\n              cards: list.cards\n            };\n            board.lists.push(newList);\n          });\n        }\n      });\n\n      return Object.assign({}, state, {\n        boards: _newBoards3,\n        isListsPending: false\n      });\n\n    case 'LOAD_LISTS_FAILED':\n      return Object.assign({}, state, {\n        listsLoadError: action.payload\n      });\n  }\n\n  switch (action.type) {\n    case 'LOAD_CURRENT_BOARD_PENDING':\n      return Object.assign({}, state, {\n        isCurrentBoardPending: true\n      });\n\n    case 'LOAD_CURRENT_BOARD_SUCCESS':\n      var _board = state.currentBoard;\n      _board = [{\n        boardId: action.payload.boardid,\n        boardTitle: action.payload.boardname,\n        lists: []\n      }];\n      return Object.assign({}, state, {\n        currentBoard: _board,\n        isCurrentBoardPending: false\n      });\n\n    case 'LOAD_CURRENT_BOARD_FAILED':\n      return Object.assign({}, state, {\n        currentBoardLoadError: action.payload\n      });\n  }\n\n  switch (action.type) {\n    case 'LOAD_CURRENT_BOARD_LIST_PENDING':\n      return Object.assign({}, state, {\n        isCurrentBoardListPending: true\n      });\n\n    case 'LOAD_CURRENT_BOARD_LIST_SUCCESS':\n      var _board2 = state.currentBoard;\n      _board2.lists = action.payload;\n      return Object.assign({}, state, {\n        currentBoard: _board2,\n        isCurrentBoardListPending: false\n      });\n\n    case 'LOAD_CURRENT_BOARD_LIST_FAILED':\n      return Object.assign({}, state, {\n        currentBoardListLoadError: action.payload\n      });\n  }\n\n  if (action.type === 'EMPTY_BOARDS') {\n    var emptyBoards = state.boards;\n    emptyBoards.splice(0, emptyBoards.length);\n    return _objectSpread(_objectSpread({}, state), {}, {\n      boards: emptyBoards\n    });\n  }\n\n  if (action.type === 'ADD_CURRENT_BOARD_LIST') {\n    var _board3 = state.currentBoard;\n\n    _board3.lists.push(action.payload);\n\n    _board3.lists[_board3.lists.length - 1].cards = [];\n    return _objectSpread(_objectSpread({}, state), {}, {\n      currentBoard: _board3\n    });\n  }\n\n  if (action.type === 'REMOVE_CURRENT_BOARD_DATA') {\n    var _board4 = state.currentBoard;\n    _board4.lists = [];\n    return _objectSpread(_objectSpread({}, state), {}, {\n      currentBoard: _board4\n    });\n  }\n\n  if (action.type === 'ADD_CURRENT_BOARD_CARD') {\n    var _board5 = state.currentBoard;\n\n    _board5.lists.map(function (list) {\n      if (action.payload.listId === list.listid) {\n        list.cards.push(action.payload.data);\n      }\n    });\n\n    return _objectSpread(_objectSpread({}, state), {}, {\n      currentBoard: _board5\n    });\n  }\n\n  if (action.type === 'UPDATE_LIST_TITLE') {\n    var _board6 = state.currentBoard;\n\n    _board6.lists.map(function (list) {\n      if (action.payload.listId === list.listid) {\n        list.listtitle = action.payload.data.listtitle;\n      }\n    });\n\n    return _objectSpread(_objectSpread({}, state), {}, {\n      currentBoard: _board6\n    });\n  }\n\n  if (action.type === 'UPDATE_CARD_CONTENT') {\n    var _board7 = state.currentBoard;\n\n    _board7.lists.map(function (list) {\n      if (action.payload.data.listid === list.listid) {\n        list.cards.map(function (card) {\n          if (card.cardid === action.payload.cardId) {\n            card.cardcontent = action.payload.data.cardcontent;\n          }\n        });\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        currentBoard: _board7\n      });\n    });\n  }\n\n  if (action.type === 'UPDATE_LIST') {\n    var _board8 = state.currentBoard;\n\n    _board8.lists.map(function (list) {\n      if (list.listid === action.payload.listid) {\n        list.cards.push(action.payload);\n      }\n    });\n\n    return _objectSpread(_objectSpread({}, state), {}, {\n      currentBoard: _board8\n    });\n  }\n\n  if (action.type === 'DELETE_CARD_FROM_LIST') {\n    var _board9 = state.currentBoard;\n\n    _board9.lists.map(function (list) {\n      if (list.listid === action.payload.sourceListId) {\n        list.cards.map(function (card, i) {\n          if (card.cardid === action.payload.data.cardid) {\n            list.cards.splice(i, 1);\n          }\n        });\n      }\n\n      console.log('deleted list ' + JSON.stringify(list));\n    });\n\n    return _objectSpread(_objectSpread({}, state), {}, {\n      currentBoard: _board9\n    });\n  }\n\n  if (action.type === 'ADD_NEW_BOARD') {\n    var boards = state.boards;\n    boards.push(action.payload);\n    return _objectSpread(_objectSpread({}, state), {}, {\n      boards: boards\n    });\n  }\n\n  return state;\n};\n\nexport default rootReducer; //  boards[{\n//      boardId:id,\n//      boardTitle: \"title\",\n//      lists: [\n//          {\n//             listid:id,\n//             listTitle:\"title\",\n//                  cards:[\n//                  {\n//                     cardId:id,\n//                     cardContext:\"context\"\n//                 }\n//         ]\n//     }\n//      ]\n// }]","map":{"version":3,"sources":["/Users/baharmutadayin/Documents/kanban-new/src/redux/reducers/rootReducer.js"],"names":["data","isConditionalExpression","initialState","boards","isBoardsPending","boardsLoadError","user","userId","userName","email","idToken","isListsPending","listsLoadError","isCardsPending","cardsLoadError","isCurrentBoardPending","currentBoardLoadError","currentBoard","isCurrentBoardListPending","currentBoardListLoadError","rootReducer","state","action","type","board","boardId","payload","boardTitle","lists","newBoards","filter","list","listId","listTitle","cards","push","map","card","cardId","cardContent","newUser","Object","assign","newBoard","boardid","boardname","newList","listid","listtitle","emptyBoards","splice","length","cardid","cardcontent","sourceListId","i","console","log","JSON","stringify"],"mappings":"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","sourcesContent":["import { data } from \"jquery\";\nimport { isConditionalExpression } from \"typescript\";\n\nconst initialState = {\n    boards: [],\n    isBoardsPending: false,\n    boardsLoadError: '',\n    user: {\n        userId: 0,\n        userName: \"\",\n        email: \"\",\n        idToken: \"\"\n    },\n    isListsPending: false,\n    listsLoadError: '',\n    isCardsPending: false,\n    cardsLoadError: '',\n    isCurrentBoardPending: false,\n    currentBoardLoadError: '',\n    currentBoard: {},\n    isCurrentBoardListPending: true,\n    currentBoardListLoadError: ''\n\n}\n\nconst rootReducer = (state = initialState, action) => {\n    if (action.type === \"CREATE_BOARD\") {\n        const board = {\n            boardId: action.payload.boardId,\n            boardTitle: action.payload.boardTitle,\n            lists: []\n\n        }\n\n        // let newBoards = state.boards\n        // newBoards.push(board)\n        return {\n            ...state,\n            currentBoard: board\n        }\n    }\n\n    if (action.type === \"CREATE_LIST\") {\n        let newBoards = state.boards;\n        // console.log(\"newBoards: \" + JSON.stringify(newBoards))\n        newBoards.filter(board => {\n            if (action.payload.boardId === board.boardId) {\n                let list = {\n                    listId: action.payload.listId,\n                    listTitle: action.payload.listTitle,\n                    cards: []\n                }\n                board.lists.push(list)\n                return {\n                    ...state,\n                    boards: newBoards\n                }\n            }\n        })\n    }\n\n    if (action.type === \"CREATE_CARD\") {\n        let newBoards = state.boards;\n        newBoards.filter(board => {\n            if (action.payload.boardId === board.boardId) {\n                board.lists.map(list => {\n                    if (list.listId === action.payload.listId) {\n                        let card = {\n                            cardId: action.payload.cardId,\n                            cardContent: action.payload.cardContent\n                        }\n                        list.cards.push(card);\n                        return {\n                            ...state,\n                            boards: newBoards\n                        }\n                    }\n                })\n            }\n        })\n    }\n\n\n    if (action.type === \"LOAD_USER\") {\n        let newUser = state.user;\n        newUser = {\n            userId: action.payload.userId,\n            userName: action.payload.userName,\n            email: action.payload.email,\n            idToken: action.payload.idToken\n        }\n        return {\n            ...state,\n            user: newUser\n        }\n    }\n\n    switch (action.type) {\n        case \"LOAD_BOARDS_PENDING\":\n            return Object.assign({}, state, { isBoardsPending: true });\n        case 'LOAD_BOARDS_SUCCESS':\n            let newBoards = state.boards;\n            action.payload.map(board => {\n                let newBoard = {\n                    boardId: board.boardid,\n                    boardTitle: board.boardname,\n                    lists: []\n                }\n                newBoards.push(newBoard)\n            })\n            return Object.assign({}, state, { boards: newBoards, isBoardsPending: false });\n\n        case 'LOAD_BOARDS_FAILED':\n            return Object.assign({}, state, { boardsLoadError: action.payload })\n\n    }\n\n    switch (action.type) {\n        case 'LOAD_LISTS_PENDING':\n            return Object.assign({}, state, { isListsPending: true });\n        case 'LOAD_LISTS_SUCCESS':\n            let newBoards = state.boards;\n            newBoards.map(board => {\n                if (board.boardId === action.payload.boardId) {\n                    action.payload.lists.map(list => {\n                        let newList = {\n                            listId: list.listid,\n                            listTitle: list.listtitle,\n                            cards: list.cards\n                        }\n                        board.lists.push(newList)\n\n                    })\n                }\n            })\n            return Object.assign({}, state, { boards: newBoards, isListsPending: false });\n        case 'LOAD_LISTS_FAILED':\n            return Object.assign({}, state, { listsLoadError: action.payload })\n\n    }\n\n\n    switch (action.type) {\n        case 'LOAD_CURRENT_BOARD_PENDING':\n            return Object.assign({}, state, { isCurrentBoardPending: true });\n        case 'LOAD_CURRENT_BOARD_SUCCESS':\n            let board = state.currentBoard;\n            board = [{\n                boardId: action.payload.boardid,\n                boardTitle: action.payload.boardname,\n                lists: []\n            }]\n            return Object.assign({}, state, { currentBoard: board, isCurrentBoardPending: false });\n        case 'LOAD_CURRENT_BOARD_FAILED':\n            return Object.assign({}, state, { currentBoardLoadError: action.payload })\n    }\n\n    switch (action.type) {\n        case 'LOAD_CURRENT_BOARD_LIST_PENDING':\n            return Object.assign({}, state, { isCurrentBoardListPending: true });\n        case 'LOAD_CURRENT_BOARD_LIST_SUCCESS':\n            let board = state.currentBoard;\n            board.lists = action.payload;\n            return Object.assign({}, state, { currentBoard: board, isCurrentBoardListPending: false });\n        case 'LOAD_CURRENT_BOARD_LIST_FAILED':\n            return Object.assign({}, state, { currentBoardListLoadError: action.payload })\n    }\n\n    if (action.type === 'EMPTY_BOARDS') {\n        let emptyBoards = state.boards;\n        emptyBoards.splice(0, emptyBoards.length);\n        return {\n            ...state,\n            boards: emptyBoards\n        }\n    }\n\n\n    if (action.type === 'ADD_CURRENT_BOARD_LIST') {\n        let board = state.currentBoard;\n        board.lists.push(action.payload);\n        board.lists[board.lists.length - 1].cards = []\n        return {\n            ...state,\n            currentBoard: board\n        }\n    }\n\n    if (action.type === 'REMOVE_CURRENT_BOARD_DATA') {\n        let board = state.currentBoard;\n        board.lists = [];\n        return {\n            ...state,\n            currentBoard: board\n        }\n    }\n\n    if (action.type === 'ADD_CURRENT_BOARD_CARD') {\n        let board = state.currentBoard;\n        board.lists.map(list => {\n            if (action.payload.listId === list.listid) {\n                list.cards.push(action.payload.data)\n            }\n        })\n        return {\n            ...state,\n            currentBoard: board\n        }\n    }\n\n    if (action.type === 'UPDATE_LIST_TITLE') {\n        let board = state.currentBoard;\n        board.lists.map(list => {\n            if (action.payload.listId === list.listid) {\n                list.listtitle = action.payload.data.listtitle;\n            }\n        })\n        return {\n            ...state,\n            currentBoard: board\n        }\n    }\n\n    if (action.type === 'UPDATE_CARD_CONTENT') {\n        let board = state.currentBoard;\n        board.lists.map(list => {\n            if (action.payload.data.listid === list.listid) {\n                list.cards.map(card => {\n                    if (card.cardid === action.payload.cardId) {\n                        card.cardcontent = action.payload.data.cardcontent\n                    }\n                })\n            }\n            return {\n                ...state,\n                currentBoard: board\n            }\n        })\n    }\n\n    if (action.type === 'UPDATE_LIST') {\n        let board = state.currentBoard;\n        board.lists.map(list=> {\n            if (list.listid === action.payload.listid) {\n                list.cards.push(action.payload)\n            }\n\n       })\n       return {\n        ...state,\n        currentBoard: board\n    }\n    }\n\n    if(action.type === 'DELETE_CARD_FROM_LIST') {\n        let board = state.currentBoard;\n        board.lists.map(list=> {\n            if (list.listid === action.payload.sourceListId) {\n                list.cards.map((card,i)=>{\n                    if(card.cardid === action.payload.data.cardid) {\n                       list.cards.splice(i, 1)\n                    }\n                })\n              }\n              console.log('deleted list ' + JSON.stringify(list))\n        })\n\n        return {\n            ...state,\n            currentBoard: board\n        }\n    }\n\n    if(action.type === 'ADD_NEW_BOARD'){\n        let boards = state.boards\n        boards.push(action.payload)\n        return {\n            ...state,\n            boards:boards\n        }\n    }\n    return state;\n}\n\n\nexport default rootReducer;\n\n\n//  boards[{\n//      boardId:id,\n//      boardTitle: \"title\",\n//      lists: [\n//          {\n//             listid:id,\n//             listTitle:\"title\",\n//                  cards:[\n//                  {\n//                     cardId:id,\n//                     cardContext:\"context\"\n//                 }\n//         ]\n//     }\n//      ]\n// }]"]},"metadata":{},"sourceType":"module"}