{"ast":null,"code":"import _regeneratorRuntime from \"/Users/baharmutadayin/Documents/kanban-new/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/baharmutadayin/Documents/kanban-new/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar loadListsAction = function loadListsAction(boardId, idToken) {\n  return function (dispatch) {\n    var bodyContent = JSON.stringify({\n      boardId: boardId\n    });\n    dispatch({\n      type: \"LOAD_LISTS_PENDING\"\n    });\n    fetch('http://localhost:3001/loadLists', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json',\n        \"Authorization\": idToken\n      },\n      body: bodyContent\n    }).then(function (response) {\n      return response.json();\n    }).then( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(lists) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                console.log(\"hello \" + lists);\n                _context2.next = 3;\n                return Promise.all(lists.map( /*#__PURE__*/function () {\n                  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(list) {\n                    var response, newcards;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.next = 2;\n                            return fetch('http://localhost:3001/loadCards', {\n                              method: 'post',\n                              headers: {\n                                'Content-Type': 'application/json',\n                                \"Authorization\": idToken\n                              },\n                              body: JSON.stringify({\n                                listId: list.listid\n                              })\n                            });\n\n                          case 2:\n                            response = _context.sent;\n                            _context.next = 5;\n                            return response.json();\n\n                          case 5:\n                            newcards = _context.sent;\n                            list.cards = newcards;\n\n                          case 7:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function (_x2) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }()));\n\n              case 3:\n                console.log(\"lists \" + JSON.stringify(lists));\n                return _context2.abrupt(\"return\", lists);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()).then(function (lists) {\n      return dispatch({\n        type: \"LOAD_LISTS_SUCCESS\",\n        payload: {\n          lists,\n          boardId\n        }\n      });\n    }).catch(function (error) {\n      return dispatch({\n        type: 'LOAD_LISTS_FAILED',\n        payload: error\n      });\n    });\n  };\n};\n\nexport default loadListsAction;","map":{"version":3,"sources":["/Users/baharmutadayin/Documents/kanban-new/src/redux/actions/loadListsAction.js"],"names":["loadListsAction","boardId","idToken","dispatch","bodyContent","JSON","stringify","type","fetch","method","headers","body","then","response","json","lists","console","log","Promise","all","map","list","listId","listid","newcards","cards","payload","catch","error"],"mappings":";;;AAGA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAACC,OAAD,EAAUC,OAAV;AAAA,SAAsB,UAACC,QAAD,EAAc;AACxD,QAAMC,WAAW,GAAGC,IAAI,CAACC,SAAL,CAAe;AAC/BL,MAAAA,OAAO,EAAEA;AADsB,KAAf,CAApB;AAGAE,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACAC,IAAAA,KAAK,CAAC,iCAAD,EACD;AACIC,MAAAA,MAAM,EAAE,MADZ;AAEIC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,yBAAiBR;AAFZ,OAFb;AAMIS,MAAAA,IAAI,EAAEP;AANV,KADC,CAAL,CASKQ,IATL,CASU,UAAAC,QAAQ,EAAI;AACd,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,KAXL,EAYKF,IAZL;AAAA,0EAYU,kBAAMG,KAAN;AAAA;AAAA;AAAA;AAAA;AACFC,gBAAAA,OAAO,CAACC,GAAR,CAAY,WAAWF,KAAvB;AADE;AAAA,uBAEIG,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACK,GAAN;AAAA,uFAAU,iBAAMC,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCACHb,KAAK,CAAC,iCAAD,EACtB;AACIC,8BAAAA,MAAM,EAAE,MADZ;AAEIC,8BAAAA,OAAO,EAAE;AACL,gDAAgB,kBADX;AAEL,iDAAiBR;AAFZ,+BAFb;AAMIS,8BAAAA,IAAI,EAAEN,IAAI,CAACC,SAAL,CAAe;AACjBgB,gCAAAA,MAAM,EAAED,IAAI,CAACE;AADI,+BAAf;AANV,6BADsB,CADF;;AAAA;AACpBV,4BAAAA,QADoB;AAAA;AAAA,mCAYHA,QAAQ,CAACC,IAAT,EAZG;;AAAA;AAYpBU,4BAAAA,QAZoB;AAaxBH,4BAAAA,IAAI,CAACI,KAAL,GAAcD,QAAd;;AAbwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAV;;AAAA;AAAA;AAAA;AAAA,oBAAZ,CAFJ;;AAAA;AAkBFR,gBAAAA,OAAO,CAACC,GAAR,CAAY,WAAWZ,IAAI,CAACC,SAAL,CAAeS,KAAf,CAAvB;AAlBE,kDAmBKA,KAnBL;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAZV;;AAAA;AAAA;AAAA;AAAA,SAiCKH,IAjCL,CAiCU,UAAAG,KAAK;AAAA,aAAIZ,QAAQ,CAAC;AAAEI,QAAAA,IAAI,EAAE,oBAAR;AAA8BmB,QAAAA,OAAO,EAAE;AAAEX,UAAAA,KAAF;AAASd,UAAAA;AAAT;AAAvC,OAAD,CAAZ;AAAA,KAjCf,EAkCK0B,KAlCL,CAkCW,UAAAC,KAAK;AAAA,aAAIzB,QAAQ,CAAC;AAAEI,QAAAA,IAAI,EAAE,mBAAR;AAA6BmB,QAAAA,OAAO,EAAEE;AAAtC,OAAD,CAAZ;AAAA,KAlChB;AAqCH,GA1CuB;AAAA,CAAxB;;AA4CA,eAAe5B,eAAf","sourcesContent":["\n\n\nconst loadListsAction = (boardId, idToken) => (dispatch) => {\n    const bodyContent = JSON.stringify({\n        boardId: boardId\n    })\n    dispatch({ type: \"LOAD_LISTS_PENDING\" });\n    fetch('http://localhost:3001/loadLists',\n        {\n            method: 'post',\n            headers: {\n                'Content-Type': 'application/json',\n                \"Authorization\": idToken\n            },\n            body: bodyContent\n        })\n        .then(response => {\n            return response.json()\n        })\n        .then(async lists => {     \n            console.log(\"hello \" + lists) \n            await Promise.all(lists.map(async list => {\n                let response = await fetch('http://localhost:3001/loadCards',\n                    {\n                        method: 'post',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            \"Authorization\": idToken\n                        },\n                        body: JSON.stringify({\n                            listId: list.listid\n                        })\n                    });\n                let newcards = await response.json()\n                list.cards  = newcards\n            }))\n\n            console.log(\"lists \" + JSON.stringify(lists))\n            return lists;\n        })\n        .then(lists => dispatch({ type: \"LOAD_LISTS_SUCCESS\", payload: { lists, boardId } }))\n        .catch(error => dispatch({ type: 'LOAD_LISTS_FAILED', payload: error }))\n\n\n}\n\nexport default loadListsAction;"]},"metadata":{},"sourceType":"module"}